<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sGhostGenerator</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    max_hp = 100;
    alarm[0] = 50; // Tiempo entre cada spawn
    Instancia = 0;
    hp = max_hp;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{   
    alarm[0]=25;
    scrSpawn(self,oFantasma);    
    return 0;
    
    /*
    //scrSpawn(self,oLobber);
    var oObj;
    oObj = oFantasma;
    //if( instance_number(self) &gt; MaxEnemigosPantalla) exit; // ???
    with (self) {                 
        //if Instancia = 5 exit;      // Máximo de instancias por cada generador
        if ds_map_exists(global.mapaSpawn, self.id) {  // Esta en el mapa           
                if(ds_map_find_value(global.mapaSpawn, self.id)&gt;=3){
                    exit;
                }
            }
        else {
            ds_map_add(global.mapaSpawn, self.id, 0);
        }
        
        RanGen = floor(random(8)); // El sitio donde se crea la instancia es aleatorio
        iCreada = 0;
        switch (RanGen) {
            case 0:
                if place_free(x-32,y-32) {iCreada = instance_create(x-48,y-32,oObj);}
            break;
            case 1:
                if place_free(x,y-32) {iCreada = instance_create(x-16,y-32,oObj);}
            break;
            case 2:
                if place_free(x+32,y-32) {iCreada = instance_create(x+16,y-32,oObj);}
            break;
            case 3:
                if place_free(x-32,y) {iCreada = instance_create(x-48,y,oObj);}
            break;
            case 4:
                if place_free(x+32,y) {iCreada = instance_create(x+16,y,oObj);}
            break;
            case 5:
                if place_free(x-32,y+32) {iCreada = instance_create(x-48,y+32,oObj);}
            break;    
            case 6:
                if place_free(x,y+32) {iCreada = instance_create(x-16,y+32,oObj);}
            break;
            case 7:
                if place_free(x+32,y+32) {iCreada = instance_create(x+16,y+32,oObj);}
            break;      
        }
    }
    // Solamente si se ha creado exitosamente la instancia, se incrementan los contadores 
    if(iCreada!=0){
        iCreada.generador = self.id; // Id del generador, este atributo esta en cada instancia del objeto
        self.Instancia++;        
        // Añadimos el generador al mapa de enemigos
            // Verificar si no esta en el mapa
            amount = ds_map_find_value(global.mapaSpawn, iCreada.generador); 
            amount++;
            ds_map_replace(global.mapaSpawn, self.id, amount); 
        
        with (iCreada) {
            if place_free(x+32,y+32){
                if !place_snapped(32, 32){
                    move_snap(32, 32);
                }
            }
        }
    }
    */
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_text(x-10,y-30,string(Instancia));
//draw_self();
draw_sprite_ext(sprite_index,image_index,x+3,y-7,image_xscale,image_yscale,image_angle,c_black,0.5);
draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,image_yscale,image_angle,image_blend,image_alpha);

var pc;
pc = (hp / max_hp) * 100;
draw_healthbar(x - 10, y - 15, x + 20, y - 17, pc, c_black, c_red, c_lime, 0, true, false);



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>12,12</point>
  </PhysicsShapePoints>
</object>
