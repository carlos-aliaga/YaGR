<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sLobber</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oEnemigoBase</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed=0; //0.15;
ranx=x-150+random(300);
rany=y-150+random(300);
PuedeDisparar = true;
alarm[0] = 60; // Tiempo entre cada disparo
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{   
    PuedeDisparar = true;
    alarm[0] = 60; // Tiempo entre cada disparo
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Lobber
{       
    // Si el Player esta vivo
    if instance_exists(oPlayer){
        // Corta distancia y visto. Este enemigo puede verte sobre las paredes
        if  distance_to_object(oPlayer) &lt;= MaxDistancia {            
            // Disparar
            if(PuedeDisparar){
                bullet_id = instance_create(x, y, oLobberShot);                    
                bullet_id.direction = point_direction(x,y,oPlayer.x,oPlayer.y) ;
                bullet_id.speed = 5; 
                PuedeDisparar = false;               
            }            
            inst = instance_nearest(x, y, oPlayer);
            mp_potential_step(inst.x,inst.y,3,1);
            
            
            //game_end();
            //speed=0;
        }
        else {
            // No lo v√©
            ranx = x - 160 + random(320);
            rany = y - 160 + random(320);
            
            ranx = median( 0, ranx, room_width - 248 );
            rany = median( 0, rany, room_height );

            mp_potential_step(ranx,rany,2,1);
        }
       /* plat=collision_rectangle(x-sprite_xoffset-1,y-sprite_yoffset+1,x+sprite_xoffset+1,y+sprite_yoffset-1,Plataforma_Movible,1,1)
if plat{
    if ((y+sprite_yoffset) &gt; plat.y) {
        var atras;
        atras=plat.x+sprite_get_width(plat.sprite_index)/2 &gt; x;
        move_contact_solid(atras*180,max(1,(abs(plat.hspeed))*(sign(atras-.5)!=sign(plat.hspeed))))
    }
}*/

       // Segun la direccion que tome, calcula el sprite a utilizar
       image_index = 0;//direction / 45;        
    }   
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oLobber">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
var i;
i = point_direction(other.x, other.y, x, y);
x += lengthdir_x(2, i);
y += lengthdir_y(2, i);


/*
var check_spd, obj_coll;

check_spd = 1;

if place_free(x +hspeed, y) {
    x += hspeed;
}
else {
    repeat(abs(hspeed)) { //check pixel by pixel for the collision point
        if !place_free(x + check_spd * sign(hspeed), y) { //if we found a dead-end
            obj_coll = instance_place(x + check_spd * sign(hspeed), y, other);
            x += (check_spd - 1) * sign(hspd) //stop at the pixel before the dead-end
            hspeed = 0;
            break;
        }
        check_spd += 1;
    }
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oParedSolida">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*i = point_direction(other.x, other.y, x, y);
x -= lengthdir_x(2, i);
y -= lengthdir_y(2, i);
*/

/*
var check_spd, obj_coll;

check_spd = 1;

if place_free(x +hspeed, y) {
    x += hspeed;
}
else {
    repeat(abs(hspeed)) { //check pixel by pixel for the collision point
        if !place_free(x + check_spd * sign(hspeed), y) { //if we found a dead-end
            obj_coll = instance_place(x + check_spd * sign(hspeed), y, other);
            x += (check_spd - 1) * sign(hspd) //stop at the pixel before the dead-end
            hspeed = 0;
            break;
        }
        check_spd += 1;
    }
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_text(x,y-5,libre);
draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>12,12</point>
  </PhysicsShapePoints>
</object>
