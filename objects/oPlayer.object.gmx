<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sElfS</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>sMascaraHeroe</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    /// Definir valores segun el tipo de heroe
    image_index = 0;
    // animation speed
    image_speed = 0.15;
    // Cada segundo se controla un evento
    alarm[0]=60;
    
    // Experiencia
        Experience = 0; // Incrementa segun se va avanzando
    // Stats Base, sin items    
        Armor = 0;      // Armadura base, crece segun la experiencia va subiendo
        Speed = 0;      // Velocidad de movimiento, solo incrementa con items
        Shot = 0;       // Da単o por disparo, solo incrementa con items
        Magic = 0;      // Da単o por magia, solo incrementa con items
        ShotSpeed = 0;  // Velocidad de disparo, solo incrementa con items
        Agilidad = 0;   // Agilidad base, crece segun la experiencia, &gt; Agilidad probilidad de &lt; da単o
            
        Critico = 0;    // ?? Probabilidad de hace Nx de da単o
        Suerte = 0;     // &gt; suerte mejores items,  incrementa con items
        
    // Define stats extra
       extraArmor = 0;
       extraSpeed = 0;
       extraShot = 0;
       extraMagic = 0;
       extraShotSpeed = 0;
       extraAgilidad = 0;
    
    
    switch (global.HeroeElegido) {
        case THOR:
            Shot = 0;
            Armor = 0;
            Speed = 0;
            ShotSpeed = 0;
            Agilidad = 0;
            Magic = 0;
            
            Critico = 0;
            Suerte = 0;
        break;
        case ELF:
    
        break;
        case VALQUIRIA:
    
        break;
        case WIZARD:
    
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// La salud y el hambre se tratan de igual manera, cada segundo se pierde salud debido al hambre
global.Salud--;

// global.Puntaje++;
alarm[0]=60;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    vx = (keyboard_check(vk_right) - keyboard_check(vk_left)) * 4;
    vy = (keyboard_check(vk_down) - keyboard_check(vk_up)) * 4;    
    if (vx != 0 || vy != 0) // If any direction key is pressed.
    {    
        // Sets the correct sprite for the direction the player is pushing in, and animation speed.
        sprite_index = global.SpriteHeroe[round(point_direction(0, 0, vx, vy) / 45) mod 8];         
        // Setear la direccion   
        scrDireccion(sprite_index);
        image_speed = 0.4;   
        /*  
        if (place_free(x + vx, y + vy)) { // Check if you can actually move into the direction.
            //y += vy * scrVelocidadPlayer(); //Wait a minute, why would you make 2 checks? vx could be zero, so adding x with zero would give the same x...
            //x += vx * scrVelocidadPlayer();
            image_speed = 0.4; //Image speed is only 0.4 when you can actually move
        } 
        else {
            image_speed = 0;
        }
        */        
        /// ????????????????????
        if keyboard_check(vk_control){
            precise_movement( ((vx/4) * (scrVelocidadPlayer()*0.1)), ((vy/4) * (scrVelocidadPlayer()*0.1)), oSolido); 
        }
        else {
            precise_movement( ((vx/4) * scrVelocidadPlayer()), ((vy/4) * scrVelocidadPlayer()), oSolido); 
        }
    }
    else { // If no direction key is pressed.
        image_speed = 0;
    }

    // En mapas grandes desctivamos los objetos que no estan en la vista/pantalla 
    // Con esto se ahorra memoria
    
    /*instance_activate_all();
    instance_deactivate_region(view_xview[0],view_yview[0],
                        view_wview[0],view_hview[0],false,true);*/                        
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oPocion">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(sPonPocionEnInventario()) {
    with(other) {
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oComida">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

switch(other.TipoComida){
    case 0:
    case 3:
    case 4:
    case 5:
        global.Salud += 100;
    break;
    case 1:
        global.Salud -= 100;
    break;
    case 2:
        randomize();
        r = choose(0,1);
        if(r=0){
            global.Salud += 100;
        }
        else{
            global.Salud -= 100;
        }
    break;
}

with(other){
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oLlave">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(sPoneLlaveInventario()) {
    with(other) {
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oTesoro">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Destruir el objeto tesoro
with(other){
    instance_destroy();
    // Mostrar el puntaje
    i = instance_create(x,y,o100);
    global.Puntaje += 100;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oGenerador1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// No es posible atravesar el objeto
a=1

// Aqui deberia haber codigo de Melee
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oPuerta">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Si se puede utilizar una llave (esta disponible)
if(sUsaLlave()){
    with(other){
        instance_destroy(); // Destruir el objeto puerta
        global.Llaves--;    // Utilizamos una llave
    }
}
else {
    a=0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{  
    if(instance_exists(oArma)){
        return 1;
    }
    else
    {   
        bullet_id = instance_create(x, y, oArma);     
    }    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Muestra info de depuraci坦n
{
    // Redibujarse
    draw_self();
    // Info
   /*draw_text(x+5,y-65,"x: " + string(view_xview+x));
    draw_text(x+5,y-54,"y: " + string(view_yview+y));
   draw_text(x+5,y-40,"v: " + string(vspeed))*/
   //draw_text(x+5,y-40,"v: " + string(global.Salud)) ;
   
   p = global.Inventario;
   //global.Inventario[i]
   
   // Muestra el inventario 
   /*draw_text(x-35,y-40,
   string(p[0]) + " " + 
   string(p[1]) + " " + 
   string(p[2]) + " " +
   string(p[3]) + " " +
   string(p[4]) + " " +
   string(p[5]) + " " +
   string(p[6]) + " " +
   string(p[7]) + " " ); */
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>10,12</point>
    <point>12,12</point>
  </PhysicsShapePoints>
</object>
